// lib/dayplan.ts
import AsyncStorage from '@react-native-async-storage/async-storage';
import { addPlan } from './plans';
import { loadProfile, UserProfile } from './profile';
import { addShoppingItem, extractIngredientsFromAIResponse } from './shopping';
import { storageAdapter } from './storage-adapter-simple';

export interface DayPlan {
  id: string;
  title: string;
  date: string;
  workout: {
    title: string;
    content: string;
  };
  meals: {
    breakfast: { title: string; content: string };
    lunch: { title: string; content: string };
    dinner: { title: string; content: string };
  };
  shoppingList: Array<{
    name: string;
    quantity: string;
    unit: string;
    category: string;
  }>;
  createdAt: string;
}

const DAY_PLANS_KEY = 'the_sport_day_plans_v1';

// üöÄ G√©n√©rer un plan de journ√©e complet
export async function generateDayPlan(): Promise<DayPlan> {
  const profile = await loadProfile();
  
  const dayPlanId = `dayplan_${Date.now()}`;
  const today = new Date().toLocaleDateString('fr-FR');
  
  // Cr√©er le titre personnalis√©
  const title = `Ma journ√©e ${today}${profile ? ` - ${profile.goal}` : ''}`;
  
  // G√©n√©rer les contenus via l'API
  const [workout, breakfast, lunch, dinner] = await Promise.all([
    generateWorkout(profile),
    generateMeal('petit-d√©jeuner', profile),
    generateMeal('d√©jeuner', profile),
    generateMeal('d√Æner', profile)
  ]);
  
  // Extraire tous les ingr√©dients des repas
  const allMealsText = `${breakfast.content}\n\n${lunch.content}\n\n${dinner.content}`;
  const shoppingList = extractIngredientsFromAIResponse(allMealsText);
  
  const dayPlan: DayPlan = {
    id: dayPlanId,
    title,
    date: today,
    workout: {
      title: workout.title,
      content: workout.content
    },
    meals: {
      breakfast: {
        title: breakfast.title,
        content: breakfast.content
      },
      lunch: {
        title: lunch.title,
        content: lunch.content
      },
      dinner: {
        title: dinner.title,
        content: dinner.content
      }
    },
    shoppingList,
    createdAt: new Date().toISOString()
  };
  
  // Sauvegarder le plan de journ√©e
  await saveDayPlan(dayPlan);
  
  return dayPlan;
}

// üèãÔ∏è G√©n√©rer une s√©ance d'entra√Ænement
async function generateWorkout(profile: UserProfile | null): Promise<{ title: string; content: string }> {
  const systemPrompt = `Tu es un coach sportif expert. G√©n√®re une s√©ance d'entra√Ænement compl√®te et structur√©e.
  
${profile ? `Profil utilisateur: ${profile.goal}, ${profile.sessions} s√©ances/semaine, ${profile.diet}` : 'Profil par d√©faut: objectif g√©n√©ral, 3 s√©ances/semaine'}

FORMAT REQUIS:
- Titre accrocheur
- √âchauffement (5-10 min)
- Exercices principaux (30-45 min)
- R√©cup√©ration (5-10 min)
- Conseils pratiques

IMPORTANT: R√©ponse concise et structur√©e. √âvite les r√©p√©titions.`;

  const response = await callAI([{ role: 'user', content: 'G√©n√®re ma s√©ance d\'entra√Ænement du jour' }], systemPrompt);
  
  return {
    title: `S√©ance ${new Date().toLocaleDateString('fr-FR')}`,
    content: response
  };
}

// üçΩÔ∏è G√©n√©rer un repas
async function generateMeal(mealType: string, profile: UserProfile | null): Promise<{ title: string; content: string }> {
  const systemPrompt = `Tu es un nutritionniste expert. G√©n√®re un ${mealType} √©quilibr√© et d√©licieux.

${profile ? `Profil utilisateur: ${profile.goal}, ${profile.sessions} s√©ances/semaine, ${profile.diet}` : 'Profil par d√©faut: objectif g√©n√©ral, alimentation √©quilibr√©e'}

FORMAT REQUIS:
- Nom du plat
- Ingr√©dients avec quantit√©s
- Instructions de pr√©paration
- Valeurs nutritionnelles (kcal, prot√©ines, glucides, lipides)

FORMAT RECETTES - Utilise TOUJOURS :
<INGREDIENTS>
{"ingredients": [{"name": "nom", "quantity": "qty", "unit": "unit√©", "category": "cat√©gorie"}]}
</INGREDIENTS>

Cat√©gories: Fruits, L√©gumes, Prot√©ines, C√©r√©ales, √âpicerie, Laitages, Autres
Unit√©s: g, kg, ml, l, cuill√®res, tasses, pinc√©es, branches, gousses, tranches, unit√©s

IMPORTANT: R√©ponse concise et structur√©e. √âvite les r√©p√©titions.`;

  const response = await callAI([{ role: 'user', content: `G√©n√®re mon ${mealType} du jour` }], systemPrompt);
  
  return {
    title: `${mealType.charAt(0).toUpperCase() + mealType.slice(1)} ${new Date().toLocaleDateString('fr-FR')}`,
    content: response
  };
}

// ü§ñ Appel √† l'API IA
async function callAI(messages: Array<{ role: string; content: string }>, systemPrompt: string): Promise<string> {
  const endpoint = "https://the-sport-backend-1d2x3vv3y-matts-projects-43da855b.vercel.app/api/chat";
  
  const response = await fetch(endpoint, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      messages: [
        { role: 'system', content: systemPrompt },
        ...messages
      ]
    })
  });
  
  if (!response.ok) {
    throw new Error(`Erreur API: ${response.status}`);
  }
  
  const data = await response.json();
  return data.reply || 'Erreur: Pas de r√©ponse re√ßue';
}

// üíæ Sauvegarder un plan de journ√©e
export async function saveDayPlan(dayPlan: DayPlan): Promise<void> {
  try {
    const existingPlans = await loadDayPlans();
    const updatedPlans = [dayPlan, ...existingPlans];
    await storageAdapter.save(DAY_PLANS_KEY, updatedPlans);
  } catch (error) {
    console.error('Erreur sauvegarde plan jour:', error);
    // Fallback vers AsyncStorage
    try {
      const existingPlans = await loadDayPlans();
      const updatedPlans = [dayPlan, ...existingPlans];
      await AsyncStorage.setItem(DAY_PLANS_KEY, JSON.stringify(updatedPlans));
    } catch (e) {
      console.error("Erreur en sauvegardant le plan de journ√©e:", e);
      throw new Error('Impossible de sauvegarder le plan de journ√©e');
    }
  }
}

// üìñ Charger tous les plans de journ√©e
export async function loadDayPlans(): Promise<DayPlan[]> {
  try {
    const data = await storageAdapter.load(DAY_PLANS_KEY);
    return data || [];
  } catch (error) {
    console.error('Erreur chargement plans jour:', error);
    // Fallback vers AsyncStorage
    try {
      const data = await AsyncStorage.getItem(DAY_PLANS_KEY);
      return data ? JSON.parse(data) : [];
    } catch (e) {
      console.error("Erreur en chargeant les plans de jour:", e);
      return [];
    }
  }
}

// üóëÔ∏è Supprimer un plan de journ√©e
export async function deleteDayPlan(dayPlanId: string): Promise<void> {
  try {
    const existingPlans = await loadDayPlans();
    const updatedPlans = existingPlans.filter(plan => plan.id !== dayPlanId);
    await storageAdapter.save(DAY_PLANS_KEY, updatedPlans);
  } catch (error) {
    console.error('Erreur suppression plan jour:', error);
    // Fallback vers AsyncStorage
    try {
      const existingPlans = await loadDayPlans();
      const updatedPlans = existingPlans.filter(plan => plan.id !== dayPlanId);
      await AsyncStorage.setItem(DAY_PLANS_KEY, JSON.stringify(updatedPlans));
    } catch (e) {
      console.error("Erreur en supprimant le plan de journ√©e:", e);
      throw new Error('Impossible de supprimer le plan de journ√©e');
    }
  }
}

// üìã Sauvegarder les √©l√©ments du plan dans les sections existantes
export async function saveDayPlanToSections(dayPlan: DayPlan): Promise<void> {
  try {
    // Sauvegarder la s√©ance
    await addPlan({
      type: 'workout',
      title: dayPlan.workout.title,
      content: dayPlan.workout.content
    });
    
    // Sauvegarder les repas
    await addPlan({
      type: 'meal',
      title: dayPlan.meals.breakfast.title,
      content: dayPlan.meals.breakfast.content
    });
    
    await addPlan({
      type: 'meal',
      title: dayPlan.meals.lunch.title,
      content: dayPlan.meals.lunch.content
    });
    
    await addPlan({
      type: 'meal',
      title: dayPlan.meals.dinner.title,
      content: dayPlan.meals.dinner.content
    });
    
    // Ajouter les ingr√©dients √† la liste de courses
    for (const item of dayPlan.shoppingList) {
      await addShoppingItem({
        ...item,
        source: `Plan jour ${dayPlan.date}`
      });
    }
  } catch (error) {
    console.error('Erreur sauvegarde sections:', error);
    throw new Error('Impossible de sauvegarder dans les sections');
  }
}

